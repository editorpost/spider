// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/editorpost/spider/store/ent/spiderpayload"
	"github.com/google/uuid"
)

// SpiderPayloadCreate is the builder for creating a SpiderPayload entity.
type SpiderPayloadCreate struct {
	config
	mutation *SpiderPayloadMutation
	hooks    []Hook
}

// SetSpiderID sets the "spider_id" field.
func (spc *SpiderPayloadCreate) SetSpiderID(u uuid.UUID) *SpiderPayloadCreate {
	spc.mutation.SetSpiderID(u)
	return spc
}

// SetPayloadID sets the "payload_id" field.
func (spc *SpiderPayloadCreate) SetPayloadID(s string) *SpiderPayloadCreate {
	spc.mutation.SetPayloadID(s)
	return spc
}

// SetExtractedAt sets the "extracted_at" field.
func (spc *SpiderPayloadCreate) SetExtractedAt(t time.Time) *SpiderPayloadCreate {
	spc.mutation.SetExtractedAt(t)
	return spc
}

// SetNillableExtractedAt sets the "extracted_at" field if the given value is not nil.
func (spc *SpiderPayloadCreate) SetNillableExtractedAt(t *time.Time) *SpiderPayloadCreate {
	if t != nil {
		spc.SetExtractedAt(*t)
	}
	return spc
}

// SetURL sets the "url" field.
func (spc *SpiderPayloadCreate) SetURL(s string) *SpiderPayloadCreate {
	spc.mutation.SetURL(s)
	return spc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (spc *SpiderPayloadCreate) SetNillableURL(s *string) *SpiderPayloadCreate {
	if s != nil {
		spc.SetURL(*s)
	}
	return spc
}

// SetPath sets the "path" field.
func (spc *SpiderPayloadCreate) SetPath(s string) *SpiderPayloadCreate {
	spc.mutation.SetPath(s)
	return spc
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (spc *SpiderPayloadCreate) SetNillablePath(s *string) *SpiderPayloadCreate {
	if s != nil {
		spc.SetPath(*s)
	}
	return spc
}

// SetStatus sets the "status" field.
func (spc *SpiderPayloadCreate) SetStatus(u uint8) *SpiderPayloadCreate {
	spc.mutation.SetStatus(u)
	return spc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (spc *SpiderPayloadCreate) SetNillableStatus(u *uint8) *SpiderPayloadCreate {
	if u != nil {
		spc.SetStatus(*u)
	}
	return spc
}

// SetTitle sets the "title" field.
func (spc *SpiderPayloadCreate) SetTitle(s string) *SpiderPayloadCreate {
	spc.mutation.SetTitle(s)
	return spc
}

// SetID sets the "id" field.
func (spc *SpiderPayloadCreate) SetID(u uuid.UUID) *SpiderPayloadCreate {
	spc.mutation.SetID(u)
	return spc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (spc *SpiderPayloadCreate) SetNillableID(u *uuid.UUID) *SpiderPayloadCreate {
	if u != nil {
		spc.SetID(*u)
	}
	return spc
}

// Mutation returns the SpiderPayloadMutation object of the builder.
func (spc *SpiderPayloadCreate) Mutation() *SpiderPayloadMutation {
	return spc.mutation
}

// Save creates the SpiderPayload in the database.
func (spc *SpiderPayloadCreate) Save(ctx context.Context) (*SpiderPayload, error) {
	spc.defaults()
	return withHooks(ctx, spc.sqlSave, spc.mutation, spc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (spc *SpiderPayloadCreate) SaveX(ctx context.Context) *SpiderPayload {
	v, err := spc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spc *SpiderPayloadCreate) Exec(ctx context.Context) error {
	_, err := spc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spc *SpiderPayloadCreate) ExecX(ctx context.Context) {
	if err := spc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spc *SpiderPayloadCreate) defaults() {
	if _, ok := spc.mutation.ExtractedAt(); !ok {
		v := spiderpayload.DefaultExtractedAt()
		spc.mutation.SetExtractedAt(v)
	}
	if _, ok := spc.mutation.Status(); !ok {
		v := spiderpayload.DefaultStatus
		spc.mutation.SetStatus(v)
	}
	if _, ok := spc.mutation.ID(); !ok {
		v := spiderpayload.DefaultID()
		spc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spc *SpiderPayloadCreate) check() error {
	if _, ok := spc.mutation.SpiderID(); !ok {
		return &ValidationError{Name: "spider_id", err: errors.New(`ent: missing required field "SpiderPayload.spider_id"`)}
	}
	if _, ok := spc.mutation.PayloadID(); !ok {
		return &ValidationError{Name: "payload_id", err: errors.New(`ent: missing required field "SpiderPayload.payload_id"`)}
	}
	if v, ok := spc.mutation.PayloadID(); ok {
		if err := spiderpayload.PayloadIDValidator(v); err != nil {
			return &ValidationError{Name: "payload_id", err: fmt.Errorf(`ent: validator failed for field "SpiderPayload.payload_id": %w`, err)}
		}
	}
	if _, ok := spc.mutation.ExtractedAt(); !ok {
		return &ValidationError{Name: "extracted_at", err: errors.New(`ent: missing required field "SpiderPayload.extracted_at"`)}
	}
	if _, ok := spc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SpiderPayload.status"`)}
	}
	if _, ok := spc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "SpiderPayload.title"`)}
	}
	return nil
}

func (spc *SpiderPayloadCreate) sqlSave(ctx context.Context) (*SpiderPayload, error) {
	if err := spc.check(); err != nil {
		return nil, err
	}
	_node, _spec := spc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	spc.mutation.id = &_node.ID
	spc.mutation.done = true
	return _node, nil
}

func (spc *SpiderPayloadCreate) createSpec() (*SpiderPayload, *sqlgraph.CreateSpec) {
	var (
		_node = &SpiderPayload{config: spc.config}
		_spec = sqlgraph.NewCreateSpec(spiderpayload.Table, sqlgraph.NewFieldSpec(spiderpayload.FieldID, field.TypeUUID))
	)
	if id, ok := spc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := spc.mutation.SpiderID(); ok {
		_spec.SetField(spiderpayload.FieldSpiderID, field.TypeUUID, value)
		_node.SpiderID = value
	}
	if value, ok := spc.mutation.PayloadID(); ok {
		_spec.SetField(spiderpayload.FieldPayloadID, field.TypeString, value)
		_node.PayloadID = value
	}
	if value, ok := spc.mutation.ExtractedAt(); ok {
		_spec.SetField(spiderpayload.FieldExtractedAt, field.TypeTime, value)
		_node.ExtractedAt = value
	}
	if value, ok := spc.mutation.URL(); ok {
		_spec.SetField(spiderpayload.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := spc.mutation.Path(); ok {
		_spec.SetField(spiderpayload.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := spc.mutation.Status(); ok {
		_spec.SetField(spiderpayload.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := spc.mutation.Title(); ok {
		_spec.SetField(spiderpayload.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	return _node, _spec
}

// SpiderPayloadCreateBulk is the builder for creating many SpiderPayload entities in bulk.
type SpiderPayloadCreateBulk struct {
	config
	err      error
	builders []*SpiderPayloadCreate
}

// Save creates the SpiderPayload entities in the database.
func (spcb *SpiderPayloadCreateBulk) Save(ctx context.Context) ([]*SpiderPayload, error) {
	if spcb.err != nil {
		return nil, spcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(spcb.builders))
	nodes := make([]*SpiderPayload, len(spcb.builders))
	mutators := make([]Mutator, len(spcb.builders))
	for i := range spcb.builders {
		func(i int, root context.Context) {
			builder := spcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SpiderPayloadMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spcb *SpiderPayloadCreateBulk) SaveX(ctx context.Context) []*SpiderPayload {
	v, err := spcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spcb *SpiderPayloadCreateBulk) Exec(ctx context.Context) error {
	_, err := spcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spcb *SpiderPayloadCreateBulk) ExecX(ctx context.Context) {
	if err := spcb.Exec(ctx); err != nil {
		panic(err)
	}
}
