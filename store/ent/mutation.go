// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/editorpost/spider/store/ent/extractindex"
	"github.com/editorpost/spider/store/ent/predicate"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeExtractIndex = "ExtractIndex"
)

// ExtractIndexMutation represents an operation that mutates the ExtractIndex nodes in the graph.
type ExtractIndexMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	payload_id    *uuid.UUID
	spider_id     *uuid.UUID
	title         *string
	extracted_at  *time.Time
	status        *uint8
	addstatus     *int8
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ExtractIndex, error)
	predicates    []predicate.ExtractIndex
}

var _ ent.Mutation = (*ExtractIndexMutation)(nil)

// extractindexOption allows management of the mutation configuration using functional options.
type extractindexOption func(*ExtractIndexMutation)

// newExtractIndexMutation creates new mutation for the ExtractIndex entity.
func newExtractIndexMutation(c config, op Op, opts ...extractindexOption) *ExtractIndexMutation {
	m := &ExtractIndexMutation{
		config:        c,
		op:            op,
		typ:           TypeExtractIndex,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExtractIndexID sets the ID field of the mutation.
func withExtractIndexID(id uuid.UUID) extractindexOption {
	return func(m *ExtractIndexMutation) {
		var (
			err   error
			once  sync.Once
			value *ExtractIndex
		)
		m.oldValue = func(ctx context.Context) (*ExtractIndex, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ExtractIndex.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExtractIndex sets the old ExtractIndex of the mutation.
func withExtractIndex(node *ExtractIndex) extractindexOption {
	return func(m *ExtractIndexMutation) {
		m.oldValue = func(context.Context) (*ExtractIndex, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExtractIndexMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExtractIndexMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ExtractIndex entities.
func (m *ExtractIndexMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExtractIndexMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExtractIndexMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ExtractIndex.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPayloadID sets the "payload_id" field.
func (m *ExtractIndexMutation) SetPayloadID(u uuid.UUID) {
	m.payload_id = &u
}

// PayloadID returns the value of the "payload_id" field in the mutation.
func (m *ExtractIndexMutation) PayloadID() (r uuid.UUID, exists bool) {
	v := m.payload_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPayloadID returns the old "payload_id" field's value of the ExtractIndex entity.
// If the ExtractIndex object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExtractIndexMutation) OldPayloadID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayloadID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayloadID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayloadID: %w", err)
	}
	return oldValue.PayloadID, nil
}

// ResetPayloadID resets all changes to the "payload_id" field.
func (m *ExtractIndexMutation) ResetPayloadID() {
	m.payload_id = nil
}

// SetSpiderID sets the "spider_id" field.
func (m *ExtractIndexMutation) SetSpiderID(u uuid.UUID) {
	m.spider_id = &u
}

// SpiderID returns the value of the "spider_id" field in the mutation.
func (m *ExtractIndexMutation) SpiderID() (r uuid.UUID, exists bool) {
	v := m.spider_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSpiderID returns the old "spider_id" field's value of the ExtractIndex entity.
// If the ExtractIndex object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExtractIndexMutation) OldSpiderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpiderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpiderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpiderID: %w", err)
	}
	return oldValue.SpiderID, nil
}

// ResetSpiderID resets all changes to the "spider_id" field.
func (m *ExtractIndexMutation) ResetSpiderID() {
	m.spider_id = nil
}

// SetTitle sets the "title" field.
func (m *ExtractIndexMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ExtractIndexMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the ExtractIndex entity.
// If the ExtractIndex object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExtractIndexMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ExtractIndexMutation) ResetTitle() {
	m.title = nil
}

// SetExtractedAt sets the "extracted_at" field.
func (m *ExtractIndexMutation) SetExtractedAt(t time.Time) {
	m.extracted_at = &t
}

// ExtractedAt returns the value of the "extracted_at" field in the mutation.
func (m *ExtractIndexMutation) ExtractedAt() (r time.Time, exists bool) {
	v := m.extracted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExtractedAt returns the old "extracted_at" field's value of the ExtractIndex entity.
// If the ExtractIndex object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExtractIndexMutation) OldExtractedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtractedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtractedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtractedAt: %w", err)
	}
	return oldValue.ExtractedAt, nil
}

// ResetExtractedAt resets all changes to the "extracted_at" field.
func (m *ExtractIndexMutation) ResetExtractedAt() {
	m.extracted_at = nil
}

// SetStatus sets the "status" field.
func (m *ExtractIndexMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *ExtractIndexMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the ExtractIndex entity.
// If the ExtractIndex object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExtractIndexMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *ExtractIndexMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *ExtractIndexMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *ExtractIndexMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// Where appends a list predicates to the ExtractIndexMutation builder.
func (m *ExtractIndexMutation) Where(ps ...predicate.ExtractIndex) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExtractIndexMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExtractIndexMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ExtractIndex, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExtractIndexMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExtractIndexMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ExtractIndex).
func (m *ExtractIndexMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExtractIndexMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.payload_id != nil {
		fields = append(fields, extractindex.FieldPayloadID)
	}
	if m.spider_id != nil {
		fields = append(fields, extractindex.FieldSpiderID)
	}
	if m.title != nil {
		fields = append(fields, extractindex.FieldTitle)
	}
	if m.extracted_at != nil {
		fields = append(fields, extractindex.FieldExtractedAt)
	}
	if m.status != nil {
		fields = append(fields, extractindex.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExtractIndexMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case extractindex.FieldPayloadID:
		return m.PayloadID()
	case extractindex.FieldSpiderID:
		return m.SpiderID()
	case extractindex.FieldTitle:
		return m.Title()
	case extractindex.FieldExtractedAt:
		return m.ExtractedAt()
	case extractindex.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExtractIndexMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case extractindex.FieldPayloadID:
		return m.OldPayloadID(ctx)
	case extractindex.FieldSpiderID:
		return m.OldSpiderID(ctx)
	case extractindex.FieldTitle:
		return m.OldTitle(ctx)
	case extractindex.FieldExtractedAt:
		return m.OldExtractedAt(ctx)
	case extractindex.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown ExtractIndex field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExtractIndexMutation) SetField(name string, value ent.Value) error {
	switch name {
	case extractindex.FieldPayloadID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayloadID(v)
		return nil
	case extractindex.FieldSpiderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpiderID(v)
		return nil
	case extractindex.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case extractindex.FieldExtractedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtractedAt(v)
		return nil
	case extractindex.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown ExtractIndex field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExtractIndexMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, extractindex.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExtractIndexMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case extractindex.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExtractIndexMutation) AddField(name string, value ent.Value) error {
	switch name {
	case extractindex.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown ExtractIndex numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExtractIndexMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExtractIndexMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExtractIndexMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ExtractIndex nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExtractIndexMutation) ResetField(name string) error {
	switch name {
	case extractindex.FieldPayloadID:
		m.ResetPayloadID()
		return nil
	case extractindex.FieldSpiderID:
		m.ResetSpiderID()
		return nil
	case extractindex.FieldTitle:
		m.ResetTitle()
		return nil
	case extractindex.FieldExtractedAt:
		m.ResetExtractedAt()
		return nil
	case extractindex.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown ExtractIndex field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExtractIndexMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExtractIndexMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExtractIndexMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExtractIndexMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExtractIndexMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExtractIndexMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExtractIndexMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ExtractIndex unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExtractIndexMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ExtractIndex edge %s", name)
}
