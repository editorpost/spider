// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/editorpost/spider/store/ent/spiderpayload"
	"github.com/google/uuid"
)

// SpiderPayload is the model entity for the SpiderPayload schema.
type SpiderPayload struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// SpiderID holds the value of the "spider_id" field.
	SpiderID uuid.UUID `json:"spider_id,omitempty"`
	// PayloadID holds the value of the "payload_id" field.
	PayloadID string `json:"payload_id,omitempty"`
	// ExtractedAt holds the value of the "extracted_at" field.
	ExtractedAt time.Time `json:"extracted_at,omitempty"`
	// Status holds the value of the "status" field.
	Status uint8 `json:"status,omitempty"`
	// Title holds the value of the "title" field.
	Title        string `json:"title,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SpiderPayload) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case spiderpayload.FieldStatus:
			values[i] = new(sql.NullInt64)
		case spiderpayload.FieldPayloadID, spiderpayload.FieldTitle:
			values[i] = new(sql.NullString)
		case spiderpayload.FieldExtractedAt:
			values[i] = new(sql.NullTime)
		case spiderpayload.FieldID, spiderpayload.FieldSpiderID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SpiderPayload fields.
func (sp *SpiderPayload) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case spiderpayload.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sp.ID = *value
			}
		case spiderpayload.FieldSpiderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field spider_id", values[i])
			} else if value != nil {
				sp.SpiderID = *value
			}
		case spiderpayload.FieldPayloadID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payload_id", values[i])
			} else if value.Valid {
				sp.PayloadID = value.String
			}
		case spiderpayload.FieldExtractedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field extracted_at", values[i])
			} else if value.Valid {
				sp.ExtractedAt = value.Time
			}
		case spiderpayload.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sp.Status = uint8(value.Int64)
			}
		case spiderpayload.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				sp.Title = value.String
			}
		default:
			sp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SpiderPayload.
// This includes values selected through modifiers, order, etc.
func (sp *SpiderPayload) Value(name string) (ent.Value, error) {
	return sp.selectValues.Get(name)
}

// Update returns a builder for updating this SpiderPayload.
// Note that you need to call SpiderPayload.Unwrap() before calling this method if this SpiderPayload
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *SpiderPayload) Update() *SpiderPayloadUpdateOne {
	return NewSpiderPayloadClient(sp.config).UpdateOne(sp)
}

// Unwrap unwraps the SpiderPayload entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *SpiderPayload) Unwrap() *SpiderPayload {
	_tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("ent: SpiderPayload is not a transactional entity")
	}
	sp.config.driver = _tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *SpiderPayload) String() string {
	var builder strings.Builder
	builder.WriteString("SpiderPayload(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sp.ID))
	builder.WriteString("spider_id=")
	builder.WriteString(fmt.Sprintf("%v", sp.SpiderID))
	builder.WriteString(", ")
	builder.WriteString("payload_id=")
	builder.WriteString(sp.PayloadID)
	builder.WriteString(", ")
	builder.WriteString("extracted_at=")
	builder.WriteString(sp.ExtractedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sp.Status))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(sp.Title)
	builder.WriteByte(')')
	return builder.String()
}

// SpiderPayloads is a parsable slice of SpiderPayload.
type SpiderPayloads []*SpiderPayload
