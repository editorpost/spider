// Code generated by ent, DO NOT EDIT.

package spiderpayload

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the spiderpayload type in the database.
	Label = "spider_payload"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSpiderID holds the string denoting the spider_id field in the database.
	FieldSpiderID = "spider_id"
	// FieldExtractedAt holds the string denoting the extracted_at field in the database.
	FieldExtractedAt = "extracted_at"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldJobProvider holds the string denoting the job_provider field in the database.
	FieldJobProvider = "job_provider"
	// FieldJobID holds the string denoting the job_id field in the database.
	FieldJobID = "job_id"
	// Table holds the table name of the spiderpayload in the database.
	Table = "spider_payloads"
)

// Columns holds all SQL columns for spiderpayload fields.
var Columns = []string{
	FieldID,
	FieldSpiderID,
	FieldExtractedAt,
	FieldURL,
	FieldPath,
	FieldStatus,
	FieldTitle,
	FieldJobProvider,
	FieldJobID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultExtractedAt holds the default value on creation for the "extracted_at" field.
	DefaultExtractedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the SpiderPayload queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySpiderID orders the results by the spider_id field.
func BySpiderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpiderID, opts...).ToFunc()
}

// ByExtractedAt orders the results by the extracted_at field.
func ByExtractedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtractedAt, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByJobProvider orders the results by the job_provider field.
func ByJobProvider(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobProvider, opts...).ToFunc()
}

// ByJobID orders the results by the job_id field.
func ByJobID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobID, opts...).ToFunc()
}
