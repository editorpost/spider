// Code generated by ent, DO NOT EDIT.

package spiderpayload

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/editorpost/spider/store/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldLTE(FieldID, id))
}

// SpiderID applies equality check predicate on the "spider_id" field. It's identical to SpiderIDEQ.
func SpiderID(v uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldEQ(FieldSpiderID, v))
}

// ExtractedAt applies equality check predicate on the "extracted_at" field. It's identical to ExtractedAtEQ.
func ExtractedAt(v time.Time) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldEQ(FieldExtractedAt, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldEQ(FieldURL, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldEQ(FieldPath, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldEQ(FieldStatus, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldEQ(FieldTitle, v))
}

// JobProvider applies equality check predicate on the "job_provider" field. It's identical to JobProviderEQ.
func JobProvider(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldEQ(FieldJobProvider, v))
}

// JobID applies equality check predicate on the "job_id" field. It's identical to JobIDEQ.
func JobID(v uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldEQ(FieldJobID, v))
}

// SpiderIDEQ applies the EQ predicate on the "spider_id" field.
func SpiderIDEQ(v uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldEQ(FieldSpiderID, v))
}

// SpiderIDNEQ applies the NEQ predicate on the "spider_id" field.
func SpiderIDNEQ(v uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldNEQ(FieldSpiderID, v))
}

// SpiderIDIn applies the In predicate on the "spider_id" field.
func SpiderIDIn(vs ...uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldIn(FieldSpiderID, vs...))
}

// SpiderIDNotIn applies the NotIn predicate on the "spider_id" field.
func SpiderIDNotIn(vs ...uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldNotIn(FieldSpiderID, vs...))
}

// SpiderIDGT applies the GT predicate on the "spider_id" field.
func SpiderIDGT(v uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldGT(FieldSpiderID, v))
}

// SpiderIDGTE applies the GTE predicate on the "spider_id" field.
func SpiderIDGTE(v uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldGTE(FieldSpiderID, v))
}

// SpiderIDLT applies the LT predicate on the "spider_id" field.
func SpiderIDLT(v uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldLT(FieldSpiderID, v))
}

// SpiderIDLTE applies the LTE predicate on the "spider_id" field.
func SpiderIDLTE(v uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldLTE(FieldSpiderID, v))
}

// ExtractedAtEQ applies the EQ predicate on the "extracted_at" field.
func ExtractedAtEQ(v time.Time) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldEQ(FieldExtractedAt, v))
}

// ExtractedAtNEQ applies the NEQ predicate on the "extracted_at" field.
func ExtractedAtNEQ(v time.Time) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldNEQ(FieldExtractedAt, v))
}

// ExtractedAtIn applies the In predicate on the "extracted_at" field.
func ExtractedAtIn(vs ...time.Time) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldIn(FieldExtractedAt, vs...))
}

// ExtractedAtNotIn applies the NotIn predicate on the "extracted_at" field.
func ExtractedAtNotIn(vs ...time.Time) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldNotIn(FieldExtractedAt, vs...))
}

// ExtractedAtGT applies the GT predicate on the "extracted_at" field.
func ExtractedAtGT(v time.Time) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldGT(FieldExtractedAt, v))
}

// ExtractedAtGTE applies the GTE predicate on the "extracted_at" field.
func ExtractedAtGTE(v time.Time) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldGTE(FieldExtractedAt, v))
}

// ExtractedAtLT applies the LT predicate on the "extracted_at" field.
func ExtractedAtLT(v time.Time) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldLT(FieldExtractedAt, v))
}

// ExtractedAtLTE applies the LTE predicate on the "extracted_at" field.
func ExtractedAtLTE(v time.Time) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldLTE(FieldExtractedAt, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldHasSuffix(FieldURL, v))
}

// URLIsNil applies the IsNil predicate on the "url" field.
func URLIsNil() predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldIsNull(FieldURL))
}

// URLNotNil applies the NotNil predicate on the "url" field.
func URLNotNil() predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldNotNull(FieldURL))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldContainsFold(FieldURL, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldHasSuffix(FieldPath, v))
}

// PathIsNil applies the IsNil predicate on the "path" field.
func PathIsNil() predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldIsNull(FieldPath))
}

// PathNotNil applies the NotNil predicate on the "path" field.
func PathNotNil() predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldNotNull(FieldPath))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldContainsFold(FieldPath, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldLTE(FieldStatus, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldContainsFold(FieldTitle, v))
}

// JobProviderEQ applies the EQ predicate on the "job_provider" field.
func JobProviderEQ(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldEQ(FieldJobProvider, v))
}

// JobProviderNEQ applies the NEQ predicate on the "job_provider" field.
func JobProviderNEQ(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldNEQ(FieldJobProvider, v))
}

// JobProviderIn applies the In predicate on the "job_provider" field.
func JobProviderIn(vs ...string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldIn(FieldJobProvider, vs...))
}

// JobProviderNotIn applies the NotIn predicate on the "job_provider" field.
func JobProviderNotIn(vs ...string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldNotIn(FieldJobProvider, vs...))
}

// JobProviderGT applies the GT predicate on the "job_provider" field.
func JobProviderGT(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldGT(FieldJobProvider, v))
}

// JobProviderGTE applies the GTE predicate on the "job_provider" field.
func JobProviderGTE(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldGTE(FieldJobProvider, v))
}

// JobProviderLT applies the LT predicate on the "job_provider" field.
func JobProviderLT(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldLT(FieldJobProvider, v))
}

// JobProviderLTE applies the LTE predicate on the "job_provider" field.
func JobProviderLTE(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldLTE(FieldJobProvider, v))
}

// JobProviderContains applies the Contains predicate on the "job_provider" field.
func JobProviderContains(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldContains(FieldJobProvider, v))
}

// JobProviderHasPrefix applies the HasPrefix predicate on the "job_provider" field.
func JobProviderHasPrefix(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldHasPrefix(FieldJobProvider, v))
}

// JobProviderHasSuffix applies the HasSuffix predicate on the "job_provider" field.
func JobProviderHasSuffix(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldHasSuffix(FieldJobProvider, v))
}

// JobProviderIsNil applies the IsNil predicate on the "job_provider" field.
func JobProviderIsNil() predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldIsNull(FieldJobProvider))
}

// JobProviderNotNil applies the NotNil predicate on the "job_provider" field.
func JobProviderNotNil() predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldNotNull(FieldJobProvider))
}

// JobProviderEqualFold applies the EqualFold predicate on the "job_provider" field.
func JobProviderEqualFold(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldEqualFold(FieldJobProvider, v))
}

// JobProviderContainsFold applies the ContainsFold predicate on the "job_provider" field.
func JobProviderContainsFold(v string) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldContainsFold(FieldJobProvider, v))
}

// JobIDEQ applies the EQ predicate on the "job_id" field.
func JobIDEQ(v uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldEQ(FieldJobID, v))
}

// JobIDNEQ applies the NEQ predicate on the "job_id" field.
func JobIDNEQ(v uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldNEQ(FieldJobID, v))
}

// JobIDIn applies the In predicate on the "job_id" field.
func JobIDIn(vs ...uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldIn(FieldJobID, vs...))
}

// JobIDNotIn applies the NotIn predicate on the "job_id" field.
func JobIDNotIn(vs ...uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldNotIn(FieldJobID, vs...))
}

// JobIDGT applies the GT predicate on the "job_id" field.
func JobIDGT(v uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldGT(FieldJobID, v))
}

// JobIDGTE applies the GTE predicate on the "job_id" field.
func JobIDGTE(v uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldGTE(FieldJobID, v))
}

// JobIDLT applies the LT predicate on the "job_id" field.
func JobIDLT(v uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldLT(FieldJobID, v))
}

// JobIDLTE applies the LTE predicate on the "job_id" field.
func JobIDLTE(v uuid.UUID) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldLTE(FieldJobID, v))
}

// JobIDIsNil applies the IsNil predicate on the "job_id" field.
func JobIDIsNil() predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldIsNull(FieldJobID))
}

// JobIDNotNil applies the NotNil predicate on the "job_id" field.
func JobIDNotNil() predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.FieldNotNull(FieldJobID))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SpiderPayload) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SpiderPayload) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SpiderPayload) predicate.SpiderPayload {
	return predicate.SpiderPayload(sql.NotPredicates(p))
}
